#include <iostream>
#include <unordered_map>
#include <set>
#include <string>
#include <vector>

//generated by converting python code to c++
class FA {
private:
    std::set<char> alphabet;
    std::set<std::string> states;
    std::string initialState;
    std::set<std::string> acceptanceStates;
    std::unordered_map<std::pair<std::string, char>, std::string, std::hash<std::string>> function;

public:
    FA(std::set<char> alphabet, std::set<std::string> states) {
        this->alphabet = alphabet;
        this->states = states;
        this->initialState = "N/A";
    }

    void setInitState(const std::string& new_state) {
        if (states.find(new_state) != states.end()) {
            initialState = new_state;
        }
        else {
            std::cout << "State does not exist in FA" << std::endl;
        }
    }

    void setAcceptState(const std::string& state) {
        if (acceptanceStates.find(state) != acceptanceStates.end()) {
            std::cout << "State already an accept state" << std::endl;
        }
        else if (states.find(state) != states.end()) {
            acceptanceStates.insert(state);
        }
        else {
            std::cout << "State does not exist in FA" << std::endl;
        }
    }

    void setTransition() {
        std::cout << "Setting transition function" << std::endl;
        for (const auto& state : states) {
            for (const auto& symbol : alphabet) {
                std::string nextState;
                std::cout << state << " " << symbol << ": ";
                std::cin >> nextState;
                function[std::make_pair(state, symbol)] = nextState;
            }
        }
    }

    void readString(const std::string& word) {
        if (initialState == "N/A") {
            std::cout << "Initial state not set" << std::endl;
        }
        else {
            std::string curr_state = initialState;
            for (char i : word) {
                if (alphabet.find(i) != alphabet.end()) {
                    auto item = std::make_pair(curr_state, i);
                    curr_state = function[item];
                }
            }
            if (acceptanceStates.find(curr_state) != acceptanceStates.end()) {
                std::cout << "Accepted" << std::endl;
            }
            else {
                std::cout << "Rejected" << std::endl;
            }
        }
    }
};

int main() {
    std::set<char> alphabet = { 'a', 'b' };
    std::set<std::string> states = { "1", "2", "3", "4" };
    FA m1(alphabet, states);
    m1.setInitState("1");
    m1.setAcceptState("3");
    m1.setTransition();
    m1.readString("abbababab");

    return 0;
}